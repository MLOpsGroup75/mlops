name: CI/CD Pipeline with Docker

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}

jobs:
  test-api-service:
    name: Test API Service
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-combined-${{ hashFiles('services/api/requirements.txt', 'services/predict/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-combined-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r services/api/requirements.txt
        pip install -r services/predict/requirements.txt
        
    - name: Run tests
      run: |
        python scripts/run_tests.py --unit --quiet
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: api-service
        name: api-service-coverage

  test-predict-service:
    name: Test Predict Service
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-combined-${{ hashFiles('services/api/requirements.txt', 'services/predict/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-combined-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r services/api/requirements.txt
        pip install -r services/predict/requirements.txt
        
    - name: Run tests
      run: |
        # python -m pytest services/predict/tests/ -v --cov=services/predict/app --cov-report=xml --cov-report=term
        python scripts/run_tests.py --unit --quiet
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: predict-service
        name: predict-service-coverage

  build-api-service:
    name: Build API Service Docker Image
    runs-on: ubuntu-latest
    needs: test-api-service
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REPOSITORY }}/api-service
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,format=long
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./services/api/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-predict-service:
    name: Build Predict Service Docker Image
    runs-on: ubuntu-latest
    needs: test-predict-service
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REPOSITORY }}/predict-service
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,format=long
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./services/predict/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-api-service, build-predict-service]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build services for testing
      run: |
        docker build -t api-service:test -f ./services/api/Dockerfile .
        docker build -t predict-service:test -f ./services/predict/Dockerfile .
        
    - name: Run integration tests
      run: |
        # Start services with proper port mapping
        echo "Starting predict service..."
        docker run -d --name predict-service -p 8001:8001 predict-service:test
        echo "Starting api service..."
        docker run -d --name api-service -p 8000:8000 api-service:test
        
        # Wait for containers to start
        sleep 5
        
        # Check container status
        echo "Checking container status..."
        docker ps -a
        
        # Show container logs for debugging
        echo "=== Predict Service Logs ==="
        docker logs predict-service
        echo "=== API Service Logs ==="
        docker logs api-service
        
        # Wait for services to be ready with retries
        echo "Waiting for services to be ready..."
        for i in {1..30}; do
          if curl -f http://localhost:8001/health > /dev/null 2>&1; then
            echo "Predict service is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Predict service failed to start after 30 attempts"
            docker logs predict-service
            exit 1
          fi
          echo "Waiting for predict service... attempt $i/30"
          sleep 2
        done
        
        for i in {1..30}; do
          if curl -f http://localhost:8000/health > /dev/null 2>&1; then
            echo "API service is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "API service failed to start after 30 attempts"
            docker logs api-service
            exit 1
          fi
          echo "Waiting for API service... attempt $i/30"
          sleep 2
        done
        
        # Run health checks
        echo "Running health checks..."
        curl -f http://localhost:8001/health || exit 1
        curl -f http://localhost:8000/health || exit 1
        
        echo "Integration tests passed!"
        
        # Clean up
        docker stop api-service predict-service || true
        docker rm api-service predict-service || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-api-service, build-predict-service]
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner - Service 1
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REPOSITORY }}/api-service:sha-${{ github.sha }}
        format: 'sarif'
        output: 'api-service-trivy-results.sarif'
        
    - name: Run Trivy vulnerability scanner - Service 2
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REPOSITORY }}/predict-service:sha-${{ github.sha }}
        format: 'sarif'
        output: 'predict-service-trivy-results.sarif'
        
    - name: Upload API service Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'api-service-trivy-results.sarif'
        category: 'api-service'
        
    - name: Upload Predict service Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'predict-service-trivy-results.sarif'
        category: 'predict-service'

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # This could involve updating Kubernetes manifests, docker-compose files, etc.